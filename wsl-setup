#!/bin/bash
set -euo pipefail

# get_first_interactive_uid returns first interactive non system user uid with uid >=1000.
function get_first_interactive_uid() {
  getent passwd | egrep -v '/nologin|/false|/sync' | sort -t: -k3,3n | awk -F: '$3 >= 1000 { print $3; exit }'
}

# create_regular_user prompts user for a username and assign default WSL permissions.
# First argument is the prefilled username.
function create_regular_user() {
  local default_username="${1}"

  local valid_username_regex='^[a-z_][a-z0-9_-]*$'
  local DEFAULT_GROUPS='adm,cdrom,sudo,dip,plugdev'

  # Filter the prefilled username to remove invalid characters.
  default_username=$(echo "${default_username}" | sed 's/[^a-z0-9_-]//g')
  # It should start with a character or _.
  default_username=$(echo "${default_username}" | sed 's/^[^a-z_]//')

  # Ensure a valid username
  while true; do
    # Prefill the prompt with the Windows username.
    read -e -p "Create a default Unix user account: " -i "${default_username}" username

    # Validate the username.
    if [[ ! "${username}" =~ ${valid_username_regex} ]]; then
      echo "Invalid username. A valid username must start with a lowercase letter or underscore, and can contain lowercase letters, digits, underscores, and dashes."
      continue
    fi

    # Create the user and change its default groups.
    if ! /usr/sbin/adduser --quiet --gecos '' "${username}"; then
      echo "Failed to create user '${username}'. Please choose a different name."
      continue
    fi

    if ! /usr/sbin/usermod "${username}" -aG "${DEFAULT_GROUPS}"; then
      echo "Failed to add '${username}' to default groups. Attempting cleanup."
      /usr/sbin/deluser --quiet "${username}"
      continue
    fi

    break
  done
}

# set_user_as_default sets the given username as the default user in the wsl.conf configuration.
# It will only set it if there is no existing default under the [user] section.
function set_user_as_default() {
  local username="${1}"

  local wsl_conf="/etc/wsl.conf"
  touch "${wsl_conf}"

  # Append [user] section with default if they don't exist.
  if ! grep -q "^\[user\]" "${wsl_conf}"; then
      echo -e "\n[user]\ndefault=${username}" >> "${wsl_conf}"
      return
  fi

  # If default is missing from the user section, append it to it.
  if ! sed -n '/^\[user\]/,/^\[/{/^\s*default\s*=/p}' "${wsl_conf}" | grep -q .; then
    sed -i '/^\[user\]/a\default='"${username}" "${wsl_conf}"
  fi
}

echo "Provisioning the new WSL instance $(wslpath -am / | cut -d '/' -f 4)"
echo "This might take a while..."

# Read the Windows user name.
win_username=$(powershell.exe -NoProfile -Command '$Env:UserName') 2>/dev/null || true
# strip control chars like \r and \n
win_username="${win_username%%[[:cntrl:]]}"
# replace any potential whitespaces with underscores.
win_username="${win_username// /_}"

# Copy the Ubuntu font into Windows filesystem, assuming the fonts-ubuntu package is seeded.
local_app_data=$(powershell.exe -NoProfile -Command '$Env:LocalAppData') 2>/dev/null || true
local_app_data="${local_app_data%%[[:cntrl:]]}"

if [ -n "${local_app_data}" ]; then
  local_app_data=$(wslpath -au "${local_app_data}") 2>/dev/null || true
  fonts_dir="${local_app_data}/Microsoft/Windows/Fonts"
  mkdir -p "${fonts_dir}"
  cp "/usr/share/fonts/truetype/ubuntu/UbuntuMono[wght].ttf" "${fonts_dir}"
fi

# Wait for cloud-init to finish if systemd and its service is enabled.
if status=$(LANG=C systemctl is-system-running 2>/dev/null) || [ "${status}" != "offline" ] && systemctl is-enabled --quiet cloud-init.service 2>/dev/null; then
  cloud-init status --wait > /dev/null 2>&1 || true
fi

# Check if there is a pre-provisioned users (pre-baked on the rootfs or created by cloud-init).
user_id=$(get_first_interactive_uid)

# If we don’t have a non system user, let’s create it.
if [ -z "${user_id}" ] ; then
  create_regular_user "${win_username}"

  user_id=$(get_first_interactive_uid)
  if [ -z "${user_id}" ] ; then
    echo 'Failed to create a regular user account'
    exit 1
  fi
fi

# Set the newly created user as the WSL default.
username=$(id -un "${user_id}")
set_user_as_default "${username}"
